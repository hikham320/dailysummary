import auth, get, os
try:
    import config
except:
    pass

def initmain():
    
    try:
        if config.EMAIL_ADDRESS == None:
            raise Exception
    except:
        print('init: 自分の e-mail アドレスを入力してください。')
        email = input('>')
    else:
        print('init: 自分の e-mail アドレスを入力してください。(何も入力しなければ {} を使用します)'.format(config.EMAIL_ADDRESS))
        email = input('>')
        if email == None or email == '':
            email = config.EMAIL_ADDRESS
    
    try:
        auth.authenticate()
    except:
        try:
            os.remove('credentials.json')
        except:
            pass
        try:
            os.remove('token.pickle')
        except:
            pass
        
        print('init: 認証用ファイルの作成を行います。')
        print('init: client_secret_*****.json ファイルを Google Cloud Platform からダウンロードして開き、中身をそのままコンソールに貼り付けてください。')
        print('init: 詳細はマニュアル（README.md）を参照してください。')
        
        credentials = input('>')
        with open( "credentials.json", 'w') as fp:
            fp.write(credentials)
            
        print('init: ブラウザウィンドウが開きます。自分の Google アカウントで認証を進めてください。')
        print('init: 詰まった場合は Control+C で処理を中断し、マニュアルの内容を確認してください。')
        auth.authenticate(fail=False)
        print('init: 認証用ファイル token.pickle を作成しました。')
    
    try:
        service = auth.authenticate()
        events = get.retrieve_events(service)
    except:
        print('init: カレンダー取得テストに失敗しました。')
    else:
        print('init: カレンダー取得テストに成功しました。')
        
    s = '''
# this file is automatically generated by init.py and may be overwritten.
# run ./init to edit this.
EMAIL_ADDRESS = '{email}'
'''.format(email=email)
    with open( "config.py", 'w') as fp:
        fp.write(s)
    print('init: 初期化処理を完了しました。')

if __name__ == '__main__':
    try:
        initmain()
    except KeyboardInterrupt:
        print('\ninit: 中断しました')
    